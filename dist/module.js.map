{"mappings":"ACAO,IAAA,AAAK,mEAAA;;WAAA;;;;ACSL,MAAM,2CAAgC;IACzC,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,YAAY;IACZ,aAAa;IACb,WAAW;AACf;;;AFbO,MAAM,4CAAU,AAAC,CAAA;IAEpB,IAAI;IACJ,IAAI;IACJ,IAAI;IAEJ,SAAS,aAAa,EAAqB;QACvC,UAAU;QACV,QAAQ,KAAK,GAAG,GAAG,WAAW;QAC9B,QAAQ,MAAM,GAAG,GAAG,YAAY;QAChC,OAAiC,QAAQ,UAAU,CAAC;IACxD;IAEA,SAAS,SAAS,CAAS,EAAE,CAAS;QAClC,KAAK,SAAS;QACd,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;YACxB,MAAM,QAAQ,KAAK,EAAE,GAAG,IAAI;YAC5B,KAAK,MAAM,CAAC,IAAI,YAAY,MAAM,GAAG,KAAK,GAAG,CAAC,QAAQ,IAAI,YAAY,MAAM,GAAG,KAAK,GAAG,CAAC;QAC5F;QACA,KAAK,SAAS;QACd,KAAK,IAAI;QACT,KAAK,MAAM;IACf;IAEA,SAAS;QACL,IAAK,IAAI,IAAI,YAAY,MAAM,EAAE,IAAI,YAAY,MAAM,GAAG,KAAK,GAAG,CAAC,KAAK,EAAE,GAAG,KAAK,QAAQ,MAAM,EAAE,KAAK,YAAY,MAAM,GAAG,KAAK,GAAG,CAAC,KAAK,EAAE,GAAG,GAC3I,IAAK,IAAI,IAAI,YAAY,MAAM,EAAE,IAAI,GAAG,IAAI,YAAY,MAAM,GAAI,CAAA,IAAI,KAAK,GAAG,CAAC,KAAK,EAAE,GAAG,EAAC,IAAK,QAAQ,KAAK,EAAE,KAAK,YAAY,MAAM,GAAI,CAAA,IAAI,KAAK,GAAG,CAAC,KAAK,EAAE,GAAG,EAAC,GAAI,KAAK,AAAC,CAAA,EAAC,KAAM,MAAM,YAAY,MAAM,GAAG,KAAK,GAAG,CAAC,KAAK,EAAE,GAAG,GAC5N,SAAS,GAAG;IAGxB;IAEA,SAAS;QACL,IAAI,MAAM;YACN,KAAK,SAAS,GAAG,YAAY,SAAS,GAAG,YAAY,SAAS,GAAG;YACjE,KAAK,WAAW,GAAG,YAAY,WAAW;YAC1C,KAAK,SAAS,GAAG,YAAY,UAAU;YACvC,KAAK,IAAI;QACb;IACJ;IAEA,SAAS,eAAe,OAAmB;QACvC,cAAc;QACd,YAAY,MAAM,GAAG,KAAK,IAAI,CAAC,KAAK,QAAQ,MAAM;QAClD,YAAY,KAAK,GAAG,IAAI,QAAQ,MAAM;IAC1C;IAEA,SAAS,KAAK,EAAU,EAAE,UAAuB;QAC7C,MAAM,KAAK,SAAS,cAAc,CAAC;QACnC,IAAI,MAAM,cAAc,mBAAmB;YACvC,aAAa;YACb,eAAe,aAAa,aAAa,CAAA,GAAA,wCAAgB;YACzD;YACA;YACA,KAAK,OAAO;QAChB,OACI,MAAM,MAAM,CAAA,GAAA,yCAAK,EAAE,SAAS;IAEpC;IAEA,OAAO;cACH;IACJ;AAGJ,CAAA","sources":["src/index.ts","src/enums/Errors.ts","src/interfaces/IHexOptions.ts"],"sourcesContent":["import { Errors } from \"./enums/Errors\";\nimport { DefaultHexOptions, HexOptions } from \"./interfaces/IHexOptions\";\n\nexport const HexGrid = (() => {\n\n    let _canvas: HTMLCanvasElement;\n    let _ctx: CanvasRenderingContext2D;\n    let _hexOptions: HexOptions;\n\n    function _setupCanvas(el: HTMLCanvasElement) {\n        _canvas = el;\n        _canvas.width = el.offsetWidth;\n        _canvas.height = el.offsetHeight;\n        _ctx = <CanvasRenderingContext2D>_canvas.getContext(\"2d\");\n    }\n\n    function _drawHex(x: number, y: number) {\n        _ctx.beginPath();\n        for (let i = 0; i < 6; i++) {\n            const angle = Math.PI / 3 * i;\n            _ctx.lineTo(x + _hexOptions.radius * Math.cos(angle), y + _hexOptions.radius * Math.sin(angle));\n        }\n        _ctx.closePath();\n        _ctx.fill();\n        _ctx.stroke();\n    }\n\n    function _drawGrid() {\n        for (let y = _hexOptions.radius; y + _hexOptions.radius * Math.sin(Math.PI / 3) < _canvas.height; y += _hexOptions.radius * Math.sin(Math.PI / 3)) {\n            for (let x = _hexOptions.radius, j = 0; x + _hexOptions.radius * (1 + Math.cos(Math.PI / 3)) < _canvas.width; x += _hexOptions.radius * (1 + Math.cos(Math.PI / 3)), y += (-1) ** j++ * _hexOptions.radius * Math.sin(Math.PI / 3)) {\n                _drawHex(x, y);\n            }\n        }\n    }\n\n    function _setCanvasStyling() {\n        if (_ctx) {\n            _ctx.fillStyle = _hexOptions.fillColor ? _hexOptions.fillColor : \"transparent\";\n            _ctx.strokeStyle = _hexOptions.borderColor;\n            _ctx.lineWidth = _hexOptions.borderSize;\n            _ctx.save();\n        }\n    }\n\n    function _setHexOptions(options: HexOptions) {\n        _hexOptions = options;\n        _hexOptions.height = Math.sqrt(3) * options.radius;\n        _hexOptions.width = 2 * options.radius;\n    }\n\n    function draw(id: string, dotOptions?: HexOptions): void {\n        const el = document.getElementById(id);\n        if (el && el instanceof HTMLCanvasElement) {\n            _setupCanvas(el);\n            _setHexOptions(dotOptions ? dotOptions : DefaultHexOptions);\n            _setCanvasStyling();\n            _drawGrid();\n            _ctx.restore();\n        } else {\n            throw Error(Errors.NO_CANVAS);\n        }\n    }\n\n    return {\n        draw\n    }\n\n\n})();","export enum Errors {\n    NO_CANVAS = \"No valid canvas found from given ID.\"\n}","export interface HexOptions {\n    radius: number;\n    height: number;\n    width: number;\n    borderSize: number;\n    borderColor: string;\n    fillColor: string | null;\n}\n\nexport const DefaultHexOptions: HexOptions = {\n    radius: 20,\n    height: 0,\n    width: 0,\n    borderSize: 1,\n    borderColor: \"#000000\",\n    fillColor: \"#FFFFFF\"\n};\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}